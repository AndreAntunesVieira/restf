const express=require("express");class RouteController{constructor(e){this.Controller=e,this.router=express.Router({mergeParams:!0})}addRoute(e,t,r){return this.router.route(e)[t](this.addMiddleware(r,e))}addMiddleware(e,t){return(r,s)=>{const o=new this.Controller(r,s),u=o[e](...middlewareParams(t,r));return o.sent?u:isPromise(u)?u.then(e=>o.respondWith(e)).catch(handleError(o)):o.respondWith(u)}}get(e,t){return this.addRoute(e,"get",t)}post(e,t){return this.addRoute(e,"post",t)}put(e,t){return this.addRoute(e,"put",t)}delete(e,t){return this.addRoute(e,"delete",t)}listen(){return this.router}static resourcesMethods(e){const t=["index","create","show","update","destroy"];return Object.getOwnPropertyNames(e.prototype).reduce((e,r)=>(e[r]=t.includes(r),e),{})}}class Router{constructor(){this.router=express.Router()}resources(e,t){const r=new RouteController(t),s=RouteController.resourcesMethods(t);return s.index&&r.get("/","index"),s.create&&r.post("/","create"),s.show&&r.get("/:id","show"),s.update&&r.put("/:id","update"),s.destroy&&r.delete("/:id","destroy"),this.router.use(e,r.listen()),this}listen(){return this.router}}function handleError(e){return t=>{let r=500;return"Not Found"===t.message&&(r=404),e.respondWith({message:t.message},{status:r})}}function isPromise(e){return!!e&&void 0!==e.then}function middlewareParams(e,t){return"/:id"===e?[t.params.id]:[]}module.exports=Router;